// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetLinksOpengraphByDomainIdByLinkIdData, GetLinksOpengraphByDomainIdByLinkIdResponses, PutLinksOpengraphByDomainIdByLinkIdData, PutLinksOpengraphByDomainIdByLinkIdResponses, GetLinkCountryByLinkIdData, GetLinkCountryByLinkIdResponses, PostLinkCountryByLinkIdData, PostLinkCountryByLinkIdResponses, PostLinkCountryBulkByLinkIdData, PostLinkCountryBulkByLinkIdResponses, DeleteLinkCountryByLinkIdByCountryData, DeleteLinkCountryByLinkIdByCountryResponses, GetLinkRegionByLinkIdData, GetLinkRegionByLinkIdResponses, PostLinkRegionByLinkIdData, PostLinkRegionByLinkIdResponses, GetLinkRegionListByCountryData, GetLinkRegionListByCountryResponses, PostLinkRegionBulkByLinkIdData, PostLinkRegionBulkByLinkIdResponses, DeleteLinkRegionByLinkIdByCountryByRegionData, DeleteLinkRegionByLinkIdByCountryByRegionResponses, GetLinksPermissionsByDomainIdByLinkIdData, GetLinksPermissionsByDomainIdByLinkIdResponses, GetLinksPermissionsByDomainIdByLinkIdErrors, DeleteLinksPermissionsByDomainIdByLinkIdByUserIdData, DeleteLinksPermissionsByDomainIdByLinkIdByUserIdResponses, DeleteLinksPermissionsByDomainIdByLinkIdByUserIdErrors, PostLinksPermissionsByDomainIdByLinkIdByUserIdData, PostLinksPermissionsByDomainIdByLinkIdByUserIdResponses, PostLinksPermissionsByDomainIdByLinkIdByUserIdErrors, GetApiLinksData, GetApiLinksResponses, GetApiLinksErrors, PostLinksQrByLinkIdStringData, PostLinksQrByLinkIdStringResponses, PostLinksQrBulkData, PostLinksQrBulkResponses, DeleteLinksByLinkIdData, DeleteLinksByLinkIdResponses, DeleteLinksDeleteBulkData, DeleteLinksDeleteBulkResponses, PostLinksArchiveData, PostLinksArchiveResponses, PostLinksArchiveErrors, PostLinksArchiveBulkData, PostLinksArchiveBulkResponses, PostLinksArchiveBulkErrors, PostLinksUnarchiveData, PostLinksUnarchiveResponses, PostLinksUnarchiveErrors, PostLinksUnarchiveBulkData, PostLinksUnarchiveBulkResponses, PostLinksUnarchiveBulkErrors, GetLinksByLinkIdData, GetLinksByLinkIdResponses, GetLinksByLinkIdErrors, PostLinksByLinkIdData, PostLinksByLinkIdResponses, PostLinksByLinkIdErrors, GetLinksExpandData, GetLinksExpandResponses, GetLinksExpandErrors, GetLinksByOriginalUrlData, GetLinksByOriginalUrlResponses, GetLinksMultipleByUrlData, GetLinksMultipleByUrlResponses, PostLinksData, PostLinksResponses, PostLinksErrors, GetLinksTweetbotData, GetLinksTweetbotResponses, PostLinksPublicData, PostLinksPublicResponses, PostLinksPublicErrors, PostLinksBulkData, PostLinksBulkResponses, GetApiDomainsData, GetApiDomainsResponses, GetDomainsByDomainIdData, GetDomainsByDomainIdResponses, GetDomainsByDomainIdErrors, PostDomainsData, PostDomainsResponses, PostDomainsErrors, PostDomainsSettingsByDomainIdData, PostDomainsSettingsByDomainIdResponses, PostDomainsSettingsByDomainIdErrors, PostTagsBulkData, PostTagsBulkResponses, GetLinksFoldersByDomainIdData, GetLinksFoldersByDomainIdResponses, GetLinksFoldersByDomainIdByFolderIdData, GetLinksFoldersByDomainIdByFolderIdResponses, PostLinksFoldersData, PostLinksFoldersResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Get link opengraph properties
 */
export const getLinksOpengraphByDomainIdByLinkId = <ThrowOnError extends boolean = false>(options: Options<GetLinksOpengraphByDomainIdByLinkIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLinksOpengraphByDomainIdByLinkIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/opengraph/{domainId}/{linkId}',
        ...options
    });
};

/**
 * Set link opengraph properties
 */
export const putLinksOpengraphByDomainIdByLinkId = <ThrowOnError extends boolean = false>(options: Options<PutLinksOpengraphByDomainIdByLinkIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutLinksOpengraphByDomainIdByLinkIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/opengraph/{domainId}/{linkId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get link countries
 */
export const getLinkCountryByLinkId = <ThrowOnError extends boolean = false>(options: Options<GetLinkCountryByLinkIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLinkCountryByLinkIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/link_country/{linkId}',
        ...options
    });
};

/**
 * Create link country
 */
export const postLinkCountryByLinkId = <ThrowOnError extends boolean = false>(options: Options<PostLinkCountryByLinkIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLinkCountryByLinkIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/link_country/{linkId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create link countries in bulk
 */
export const postLinkCountryBulkByLinkId = <ThrowOnError extends boolean = false>(options: Options<PostLinkCountryBulkByLinkIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLinkCountryBulkByLinkIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/link_country/bulk/{linkId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete link country
 */
export const deleteLinkCountryByLinkIdByCountry = <ThrowOnError extends boolean = false>(options: Options<DeleteLinkCountryByLinkIdByCountryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteLinkCountryByLinkIdByCountryResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/link_country/{linkId}/{country}',
        ...options
    });
};

/**
 * Get link regions
 */
export const getLinkRegionByLinkId = <ThrowOnError extends boolean = false>(options: Options<GetLinkRegionByLinkIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLinkRegionByLinkIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/link_region/{linkId}',
        ...options
    });
};

/**
 * Add region targeting to link
 * Add region targeting to link
 */
export const postLinkRegionByLinkId = <ThrowOnError extends boolean = false>(options: Options<PostLinkRegionByLinkIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLinkRegionByLinkIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/link_region/{linkId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get all regions by country
 */
export const getLinkRegionListByCountry = <ThrowOnError extends boolean = false>(options: Options<GetLinkRegionListByCountryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLinkRegionListByCountryResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/link_region/list/{country}',
        ...options
    });
};

/**
 * Create link regions in bulk
 */
export const postLinkRegionBulkByLinkId = <ThrowOnError extends boolean = false>(options: Options<PostLinkRegionBulkByLinkIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLinkRegionBulkByLinkIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/link_region/bulk/{linkId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete link region by country
 */
export const deleteLinkRegionByLinkIdByCountryByRegion = <ThrowOnError extends boolean = false>(options: Options<DeleteLinkRegionByLinkIdByCountryByRegionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteLinkRegionByLinkIdByCountryByRegionResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/link_region/{linkId}/{country}/{region}',
        ...options
    });
};

/**
 * Get link permissions
 */
export const getLinksPermissionsByDomainIdByLinkId = <ThrowOnError extends boolean = false>(options: Options<GetLinksPermissionsByDomainIdByLinkIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLinksPermissionsByDomainIdByLinkIdResponses, GetLinksPermissionsByDomainIdByLinkIdErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/permissions/{domainId}/{linkId}',
        ...options
    });
};

/**
 * Delete link permissions
 */
export const deleteLinksPermissionsByDomainIdByLinkIdByUserId = <ThrowOnError extends boolean = false>(options: Options<DeleteLinksPermissionsByDomainIdByLinkIdByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteLinksPermissionsByDomainIdByLinkIdByUserIdResponses, DeleteLinksPermissionsByDomainIdByLinkIdByUserIdErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/permissions/{domainId}/{linkId}/{userId}',
        ...options
    });
};

/**
 * Add link permission
 */
export const postLinksPermissionsByDomainIdByLinkIdByUserId = <ThrowOnError extends boolean = false>(options: Options<PostLinksPermissionsByDomainIdByLinkIdByUserIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLinksPermissionsByDomainIdByLinkIdByUserIdResponses, PostLinksPermissionsByDomainIdByLinkIdByUserIdErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/permissions/{domainId}/{linkId}/{userId}',
        ...options
    });
};

/**
 * Link list
 * Get domain links
 */
export const getApiLinks = <ThrowOnError extends boolean = false>(options: Options<GetApiLinksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiLinksResponses, GetApiLinksErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/links',
        ...options
    });
};

/**
 * Generate QR code for the link
 */
export const postLinksQrByLinkIdString = <ThrowOnError extends boolean = false>(options: Options<PostLinksQrByLinkIdStringData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLinksQrByLinkIdStringResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/qr/{linkIdString}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Generate QR codes for the link in bulk
 * Generate QR codes for the link in bulk. Rate limit - 1 request per minute
 */
export const postLinksQrBulk = <ThrowOnError extends boolean = false>(options: Options<PostLinksQrBulkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLinksQrBulkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/qr/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete link
 * Delete link by id
 *
 * **Rate limit**: 20/s
 */
export const deleteLinksByLinkId = <ThrowOnError extends boolean = false>(options: Options<DeleteLinksByLinkIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteLinksByLinkIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/{link_id}',
        ...options
    });
};

/**
 * Delete links in bulk
 * Delete links in bulk by ids
 *
 * **Rate limit**: 1/s
 */
export const deleteLinksDeleteBulk = <ThrowOnError extends boolean = false>(options: Options<DeleteLinksDeleteBulkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteLinksDeleteBulkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/delete_bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Archive link
 */
export const postLinksArchive = <ThrowOnError extends boolean = false>(options: Options<PostLinksArchiveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLinksArchiveResponses, PostLinksArchiveErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/archive',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Archive links in bulk
 */
export const postLinksArchiveBulk = <ThrowOnError extends boolean = false>(options: Options<PostLinksArchiveBulkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLinksArchiveBulkResponses, PostLinksArchiveBulkErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/archive_bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unarchive link
 */
export const postLinksUnarchive = <ThrowOnError extends boolean = false>(options: Options<PostLinksUnarchiveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLinksUnarchiveResponses, PostLinksUnarchiveErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/unarchive',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Unarchive links in bulk
 */
export const postLinksUnarchiveBulk = <ThrowOnError extends boolean = false>(options: Options<PostLinksUnarchiveBulkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLinksUnarchiveBulkResponses, PostLinksUnarchiveBulkErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/unarchive_bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get link info by link id
 * Get link info by link id. Rate limit: 20/s
 */
export const getLinksByLinkId = <ThrowOnError extends boolean = false>(options: Options<GetLinksByLinkIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLinksByLinkIdResponses, GetLinksByLinkIdErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/{linkId}',
        ...options
    });
};

/**
 * Update existing URL
 * Update original url, title or path for existing URL by id
 *
 * **Rate limit**: 20/s
 */
export const postLinksByLinkId = <ThrowOnError extends boolean = false>(options: Options<PostLinksByLinkIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLinksByLinkIdResponses, PostLinksByLinkIdErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/{linkId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get link info by path
 * Get link info by path. Rate limit: 20/s
 */
export const getLinksExpand = <ThrowOnError extends boolean = false>(options: Options<GetLinksExpandData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLinksExpandResponses, GetLinksExpandErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/expand',
        ...options
    });
};

/**
 * Get link info by original URL
 * **DEPRECATED** Get link info by original URL. Rate limit: 20/s
 */
export const getLinksByOriginalUrl = <ThrowOnError extends boolean = false>(options: Options<GetLinksByOriginalUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLinksByOriginalUrlResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/by-original-url',
        ...options
    });
};

/**
 * Get links info by original URL
 * Returns all links with the same original URL
 */
export const getLinksMultipleByUrl = <ThrowOnError extends boolean = false>(options: Options<GetLinksMultipleByUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLinksMultipleByUrlResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/multiple-by-url',
        ...options
    });
};

/**
 * Create a new link
 * This method creates a new link. If parameter "path" is omitted, it
 * generates path by algorithm, chosen in domain settings.
 *
 * Notes:
 *
 * 1. If URL with a given path already exists and originalURL of the URL in database is equal to originalURL argument, it returns information about existing URL
 * 2. If URL with a given path already exists and originalURL is different from originalURL in database, it returns error with a status `409`
 * 3. If URL with a given originalURL exists, and no path is given, it returns information about existing URL and does not create anything
 * 4. If URL with a given originalURL exists, and custom path is given, it creates a new short URL
 *
 * **Rate limit**: 50/s
 */
export const postLinks = <ThrowOnError extends boolean = false>(options: Options<PostLinksData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLinksResponses, PostLinksErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create a new link (simple version)
 *
 * Simple version of link create endpoint. You can use it if you can not use POST method
 * **Rate limit**: 50/s
 *
 */
export const getLinksTweetbot = <ThrowOnError extends boolean = false>(options: Options<GetLinksTweetbotData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLinksTweetbotResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/tweetbot',
        ...options
    });
};

/**
 * Create a new link using public API key
 * This method creates a new link. Only this method should be used in client-side applications
 *
 * If parameter "path" is omitted, it generates path by algorithm, chosen in domain settings.
 *
 * You can use it with public API key in your frontend applications (client-side javascript, Android & iPhone apps)
 * **Rate limit**: 50/s
 */
export const postLinksPublic = <ThrowOnError extends boolean = false>(options: Options<PostLinksPublicData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLinksPublicResponses, PostLinksPublicErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/public',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Create up to 1000 links in one call
 * Please use this method if you need to create big packs of links. It
 * accepts up to 1000 links in one API call.
 *
 * It works almost the same as single link creation endpoint, but accepts
 * an array of URLs and returns an array of responses.
 *
 * Returns list of Link objects. If any URL is failed to insert, it returns
 * error object instead as array element. Method is not transactional – it
 * can insert some links from the list and return an error for others.
 *
 * **Rate limit**: 5 queries in 10 seconds
 */
export const postLinksBulk = <ThrowOnError extends boolean = false>(options: Options<PostLinksBulkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLinksBulkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * List domains
 * Shows all domains of current user
 */
export const getApiDomains = <ThrowOnError extends boolean = false>(options?: Options<GetApiDomainsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiDomainsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/domains',
        ...options
    });
};

/**
 * Get domain details by id
 */
export const getDomainsByDomainId = <ThrowOnError extends boolean = false>(options: Options<GetDomainsByDomainIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetDomainsByDomainIdResponses, GetDomainsByDomainIdErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/domains/{domainId}',
        ...options
    });
};

/**
 * Create a domain
 */
export const postDomains = <ThrowOnError extends boolean = false>(options: Options<PostDomainsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostDomainsResponses, PostDomainsErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/domains',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update domain settings
 * Update domain settings
 */
export const postDomainsSettingsByDomainId = <ThrowOnError extends boolean = false>(options: Options<PostDomainsSettingsByDomainIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostDomainsSettingsByDomainIdResponses, PostDomainsSettingsByDomainIdErrors, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/domains/settings/{domainId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Append a single tag to the links in bulk
 */
export const postTagsBulk = <ThrowOnError extends boolean = false>(options: Options<PostTagsBulkData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostTagsBulkResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/tags/bulk',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Get links folders for the specified domain id
 */
export const getLinksFoldersByDomainId = <ThrowOnError extends boolean = false>(options: Options<GetLinksFoldersByDomainIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLinksFoldersByDomainIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/folders/{domainId}',
        ...options
    });
};

/**
 * Get links folder for the specified domain id and user id
 */
export const getLinksFoldersByDomainIdByFolderId = <ThrowOnError extends boolean = false>(options: Options<GetLinksFoldersByDomainIdByFolderIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLinksFoldersByDomainIdByFolderIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/folders/{domainId}/{folderId}',
        ...options
    });
};

/**
 * Create a new folder
 */
export const postLinksFolders = <ThrowOnError extends boolean = false>(options: Options<PostLinksFoldersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLinksFoldersResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/links/folders',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};