// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig({"baseUrl": "https://api.short.io"}), type Options } from './client';
import type { GetLinksOpengraphByDomainIdByLinkIdData, PutLinksOpengraphByDomainIdByLinkIdData, GetLinkCountryByLinkIdData, PostLinkCountryByLinkIdData, PostLinkCountryBulkByLinkIdData, DeleteLinkCountryByLinkIdByCountryData, GetLinkRegionByLinkIdData, PostLinkRegionByLinkIdData, GetLinkRegionListByCountryData, PostLinkRegionBulkByLinkIdData, DeleteLinkRegionByLinkIdByCountryByRegionData, GetLinksPermissionsByDomainIdByLinkIdData, GetLinksPermissionsByDomainIdByLinkIdError, GetLinksPermissionsByDomainIdByLinkIdResponse, DeleteLinksPermissionsByDomainIdByLinkIdByUserIdData, DeleteLinksPermissionsByDomainIdByLinkIdByUserIdError, DeleteLinksPermissionsByDomainIdByLinkIdByUserIdResponse, PostLinksPermissionsByDomainIdByLinkIdByUserIdData, PostLinksPermissionsByDomainIdByLinkIdByUserIdError, PostLinksPermissionsByDomainIdByLinkIdByUserIdResponse, GetApiLinksData, GetApiLinksError, GetApiLinksResponse, PostLinksQrByLinkIdStringData, PostLinksQrBulkData, PostLinksQrBulkResponse, DeleteLinksByLinkIdData, DeleteLinksByLinkIdResponse, DeleteLinksDeleteBulkData, DeleteLinksDeleteBulkResponse, PostLinksArchiveData, PostLinksArchiveError, PostLinksArchiveResponse, PostLinksArchiveBulkData, PostLinksArchiveBulkError, PostLinksArchiveBulkResponse, PostLinksUnarchiveData, PostLinksUnarchiveError, PostLinksUnarchiveResponse, PostLinksUnarchiveBulkData, PostLinksUnarchiveBulkError, PostLinksUnarchiveBulkResponse, GetLinksByLinkIdData, GetLinksByLinkIdError, GetLinksByLinkIdResponse, PostLinksByLinkIdData, PostLinksByLinkIdError, PostLinksByLinkIdResponse, GetLinksExpandData, GetLinksExpandError, GetLinksExpandResponse, GetLinksByOriginalUrlData, GetLinksMultipleByUrlData, PostLinksData, PostLinksError, PostLinksResponse, GetLinksTweetbotData, PostLinksPublicData, PostLinksPublicError, PostLinksPublicResponse, PostLinksBulkData, GetApiDomainsData, GetApiDomainsResponse, GetDomainsByDomainIdData, GetDomainsByDomainIdError, GetDomainsByDomainIdResponse, PostDomainsData, PostDomainsError, PostDomainsResponse, PostDomainsSettingsByDomainIdData, PostTagsBulkData, GetLinksFoldersByDomainIdData, GetLinksFoldersByDomainIdByFolderIdData, PostLinksFoldersData } from './types.gen';

export const client = createClient(createConfig({"baseUrl": "https://api.short.io"})());

/**
 * Get link opengraph properties
 */
export const getLinksOpengraphByDomainIdByLinkId = <ThrowOnError extends boolean = false>(options: Options<GetLinksOpengraphByDomainIdByLinkIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/links/opengraph/{domainId}/{linkId}'
    });
};

/**
 * Set link opengraph properties
 */
export const putLinksOpengraphByDomainIdByLinkId = <ThrowOnError extends boolean = false>(options: Options<PutLinksOpengraphByDomainIdByLinkIdData, ThrowOnError>) => {
    return (options?.client ?? client).put<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/links/opengraph/{domainId}/{linkId}'
    });
};

/**
 * Get link countries
 */
export const getLinkCountryByLinkId = <ThrowOnError extends boolean = false>(options: Options<GetLinkCountryByLinkIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/link_country/{linkId}'
    });
};

/**
 * Create link country
 */
export const postLinkCountryByLinkId = <ThrowOnError extends boolean = false>(options: Options<PostLinkCountryByLinkIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/link_country/{linkId}'
    });
};

/**
 * Create link countries in bulk
 */
export const postLinkCountryBulkByLinkId = <ThrowOnError extends boolean = false>(options: Options<PostLinkCountryBulkByLinkIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/link_country/bulk/{linkId}'
    });
};

/**
 * Delete link country
 */
export const deleteLinkCountryByLinkIdByCountry = <ThrowOnError extends boolean = false>(options: Options<DeleteLinkCountryByLinkIdByCountryData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/link_country/{linkId}/{country}'
    });
};

/**
 * Get link regions
 */
export const getLinkRegionByLinkId = <ThrowOnError extends boolean = false>(options: Options<GetLinkRegionByLinkIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/link_region/{linkId}'
    });
};

/**
 * Add region targeting to link
 * Add region targeting to link
 */
export const postLinkRegionByLinkId = <ThrowOnError extends boolean = false>(options: Options<PostLinkRegionByLinkIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/link_region/{linkId}'
    });
};

/**
 * Get all regions by country
 */
export const getLinkRegionListByCountry = <ThrowOnError extends boolean = false>(options: Options<GetLinkRegionListByCountryData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/link_region/list/{country}'
    });
};

/**
 * Create link regions in bulk
 */
export const postLinkRegionBulkByLinkId = <ThrowOnError extends boolean = false>(options: Options<PostLinkRegionBulkByLinkIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/link_region/bulk/{linkId}'
    });
};

/**
 * Delete link region by country
 */
export const deleteLinkRegionByLinkIdByCountryByRegion = <ThrowOnError extends boolean = false>(options: Options<DeleteLinkRegionByLinkIdByCountryByRegionData, ThrowOnError>) => {
    return (options?.client ?? client).delete<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/link_region/{linkId}/{country}/{region}'
    });
};

/**
 * Get link permissions
 */
export const getLinksPermissionsByDomainIdByLinkId = <ThrowOnError extends boolean = false>(options: Options<GetLinksPermissionsByDomainIdByLinkIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLinksPermissionsByDomainIdByLinkIdResponse, GetLinksPermissionsByDomainIdByLinkIdError, ThrowOnError>({
        ...options,
        url: '/links/permissions/{domainId}/{linkId}'
    });
};

/**
 * Delete link permissions
 */
export const deleteLinksPermissionsByDomainIdByLinkIdByUserId = <ThrowOnError extends boolean = false>(options: Options<DeleteLinksPermissionsByDomainIdByLinkIdByUserIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteLinksPermissionsByDomainIdByLinkIdByUserIdResponse, DeleteLinksPermissionsByDomainIdByLinkIdByUserIdError, ThrowOnError>({
        ...options,
        url: '/links/permissions/{domainId}/{linkId}/{userId}'
    });
};

/**
 * Add link permission
 */
export const postLinksPermissionsByDomainIdByLinkIdByUserId = <ThrowOnError extends boolean = false>(options: Options<PostLinksPermissionsByDomainIdByLinkIdByUserIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostLinksPermissionsByDomainIdByLinkIdByUserIdResponse, PostLinksPermissionsByDomainIdByLinkIdByUserIdError, ThrowOnError>({
        ...options,
        url: '/links/permissions/{domainId}/{linkId}/{userId}'
    });
};

/**
 * Link list
 * Get domain links
 */
export const getApiLinks = <ThrowOnError extends boolean = false>(options: Options<GetApiLinksData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiLinksResponse, GetApiLinksError, ThrowOnError>({
        ...options,
        url: '/api/links'
    });
};

/**
 * Generate QR code for the link
 */
export const postLinksQrByLinkIdString = <ThrowOnError extends boolean = false>(options: Options<PostLinksQrByLinkIdStringData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/links/qr/{linkIdString}'
    });
};

/**
 * Generate QR codes for the link in bulk
 * Generate QR codes for the link in bulk. Rate limit - 1 request per minute
 */
export const postLinksQrBulk = <ThrowOnError extends boolean = false>(options: Options<PostLinksQrBulkData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostLinksQrBulkResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/links/qr/bulk'
    });
};

/**
 * Delete link
 * Delete link by id
 *
 * **Rate limit**: 20/s
 */
export const deleteLinksByLinkId = <ThrowOnError extends boolean = false>(options: Options<DeleteLinksByLinkIdData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteLinksByLinkIdResponse, unknown, ThrowOnError>({
        ...options,
        url: '/links/{link_id}'
    });
};

/**
 * Delete links in bulk
 * Delete links in bulk by ids
 *
 * **Rate limit**: 1/s
 */
export const deleteLinksDeleteBulk = <ThrowOnError extends boolean = false>(options: Options<DeleteLinksDeleteBulkData, ThrowOnError>) => {
    return (options?.client ?? client).delete<DeleteLinksDeleteBulkResponse, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/links/delete_bulk'
    });
};

/**
 * Archive link
 */
export const postLinksArchive = <ThrowOnError extends boolean = false>(options: Options<PostLinksArchiveData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostLinksArchiveResponse, PostLinksArchiveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/links/archive'
    });
};

/**
 * Archive links in bulk
 */
export const postLinksArchiveBulk = <ThrowOnError extends boolean = false>(options: Options<PostLinksArchiveBulkData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostLinksArchiveBulkResponse, PostLinksArchiveBulkError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/links/archive_bulk'
    });
};

/**
 * Unarchive link
 */
export const postLinksUnarchive = <ThrowOnError extends boolean = false>(options: Options<PostLinksUnarchiveData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostLinksUnarchiveResponse, PostLinksUnarchiveError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/links/unarchive'
    });
};

/**
 * Unarchive links in bulk
 */
export const postLinksUnarchiveBulk = <ThrowOnError extends boolean = false>(options: Options<PostLinksUnarchiveBulkData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostLinksUnarchiveBulkResponse, PostLinksUnarchiveBulkError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/links/unarchive_bulk'
    });
};

/**
 * Get link info by link id
 * Get link info by link id. Rate limit: 20/s
 */
export const getLinksByLinkId = <ThrowOnError extends boolean = false>(options: Options<GetLinksByLinkIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLinksByLinkIdResponse, GetLinksByLinkIdError, ThrowOnError>({
        ...options,
        url: '/links/{linkId}'
    });
};

/**
 * Update existing URL
 * Update original url, title or path for existing URL by id
 *
 * **Rate limit**: 20/s
 */
export const postLinksByLinkId = <ThrowOnError extends boolean = false>(options: Options<PostLinksByLinkIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostLinksByLinkIdResponse, PostLinksByLinkIdError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/links/{linkId}'
    });
};

/**
 * Get link info by path
 * Get link info by path. Rate limit: 20/s
 */
export const getLinksExpand = <ThrowOnError extends boolean = false>(options: Options<GetLinksExpandData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetLinksExpandResponse, GetLinksExpandError, ThrowOnError>({
        ...options,
        url: '/links/expand'
    });
};

/**
 * Get link info by original URL
 * **DEPRECATED** Get link info by original URL. Rate limit: 20/s
 */
export const getLinksByOriginalUrl = <ThrowOnError extends boolean = false>(options: Options<GetLinksByOriginalUrlData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/links/by-original-url'
    });
};

/**
 * Get links info by original URL
 * Returns all links with the same original URL
 */
export const getLinksMultipleByUrl = <ThrowOnError extends boolean = false>(options: Options<GetLinksMultipleByUrlData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/links/multiple-by-url'
    });
};

/**
 * Create a new link
 * This method creates a new link. If parameter "path" is omitted, it
 * generates path by algorithm, chosen in domain settings.
 *
 * Notes:
 *
 * 1. If URL with a given path already exists and originalURL of the URL in database is equal to originalURL argument, it returns information about existing URL
 * 2. If URL with a given path already exists and originalURL is different from originalURL in database, it returns error with a status `409`
 * 3. If URL with a given originalURL exists, and no path is given, it returns information about existing URL and does not create anything
 * 4. If URL with a given originalURL exists, and custom path is given, it creates a new short URL
 *
 * **Rate limit**: 50/s
 */
export const postLinks = <ThrowOnError extends boolean = false>(options: Options<PostLinksData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostLinksResponse, PostLinksError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/links'
    });
};

/**
 * Create a new link (simple version)
 *
 * Simple version of link create endpoint. You can use it if you can not use POST method
 * **Rate limit**: 50/s
 *
 */
export const getLinksTweetbot = <ThrowOnError extends boolean = false>(options: Options<GetLinksTweetbotData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/links/tweetbot'
    });
};

/**
 * Create a new link using public API key
 * This method creates a new link. Only this method should be used in client-side applications
 *
 * If parameter "path" is omitted, it generates path by algorithm, chosen in domain settings.
 *
 * You can use it with public API key in your frontend applications (client-side javascript, Android & iPhone apps)
 * **Rate limit**: 20/s
 */
export const postLinksPublic = <ThrowOnError extends boolean = false>(options: Options<PostLinksPublicData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostLinksPublicResponse, PostLinksPublicError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/links/public'
    });
};

/**
 * Create up to 1000 links in one call
 * Please use this method if you need to create big packs of links. It
 * accepts up to 1000 links in one API call.
 *
 * It works almost the same as single link creation endpoint, but accepts
 * an array of URLs and returns an array of responses.
 *
 * Returns list of Link objects. If any URL is failed to insert, it returns
 * error object instead as array element. Method is not transactional – it
 * can insert some links from the list and return an error for others.
 *
 * **Rate limit**: 5 queries in 10 seconds
 */
export const postLinksBulk = <ThrowOnError extends boolean = false>(options: Options<PostLinksBulkData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/links/bulk'
    });
};

/**
 * List domains
 * Shows all domains of current user
 */
export const getApiDomains = <ThrowOnError extends boolean = false>(options?: Options<GetApiDomainsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetApiDomainsResponse, unknown, ThrowOnError>({
        ...options,
        url: '/api/domains'
    });
};

/**
 * Get domain details by id
 */
export const getDomainsByDomainId = <ThrowOnError extends boolean = false>(options: Options<GetDomainsByDomainIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetDomainsByDomainIdResponse, GetDomainsByDomainIdError, ThrowOnError>({
        ...options,
        url: '/domains/{domainId}'
    });
};

/**
 * Create a domain
 */
export const postDomains = <ThrowOnError extends boolean = false>(options: Options<PostDomainsData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostDomainsResponse, PostDomainsError, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/domains'
    });
};

/**
 * Update domain settings
 * Update domain settings
 */
export const postDomainsSettingsByDomainId = <ThrowOnError extends boolean = false>(options: Options<PostDomainsSettingsByDomainIdData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/domains/settings/{domainId}'
    });
};

/**
 * Append a single tag to the links in bulk
 */
export const postTagsBulk = <ThrowOnError extends boolean = false>(options: Options<PostTagsBulkData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/tags/bulk'
    });
};

export const getLinksFoldersByDomainId = <ThrowOnError extends boolean = false>(options: Options<GetLinksFoldersByDomainIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/links/folders/{domainId}'
    });
};

export const getLinksFoldersByDomainIdByFolderId = <ThrowOnError extends boolean = false>(options: Options<GetLinksFoldersByDomainIdByFolderIdData, ThrowOnError>) => {
    return (options?.client ?? client).get<unknown, unknown, ThrowOnError>({
        ...options,
        url: '/links/folders/{domainId}/{folderId}'
    });
};

export const postLinksFolders = <ThrowOnError extends boolean = false>(options: Options<PostLinksFoldersData, ThrowOnError>) => {
    return (options?.client ?? client).post<unknown, unknown, ThrowOnError>({
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        },
        url: '/links/folders'
    });
};